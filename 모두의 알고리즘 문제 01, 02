첫 게시글은 '모두의 알고리즘' 문제 01, 02번으로 하려고 한다.
과정이 비교적 간단하여 01번과 02번을 묶어서 업로드한다.

01번 문제는 '1부터 n까지의 합 구하기' 문제이다.
그야말로 코딩을 처음 접하는 사람들이 모두 한 번씩 거쳐가는 문제..

def sum_n_1(n):
	s = 0
	for i in range(1, n+1):
		s = s + i
	return s
  
가장 보편적인 방법인 for 문을 이용해서 한 방법이다.
for의 range를 설정해줄 때 (n, m)이 있으면 m 대신 m-1까지만 들어간다는 사실을 명심할 필요가 있다.

def sum_n_2(n):
	ruturn n * ( n + 1 ) // 2
  
다른 방법도 있다. 1부터 n까지의 합을 구하는 공식을 사용해서 코드를 만드는 것이다.
sum_n_2의 방법은 sum_n_1의 방법보다 훨씬 간단하다.

입력 크기가 크면 계산 횟수도 커지기 때문에
알고리즘의 수행 성능을 높이기 위해서는 알고리즘을 간단하게 만들 필요가 있다.

==============================================================================

여기서부터는 문제 02번이다.
주어진 숫자 n개 중 가장 큰 숫자를 찾는 알고리즘을 만드는 문제이다.

def find_max(a):
	n = len(a)
	max_v = a[0]
	for i in range(1, n):
		if a[i] > max_v
		max_v = a[i]
	return max_v
  
먼저 len(a) = n으로 할당해준 후 이것으로 답을 구해나간다.

def find_max_index(a):
	n = len(a)
	max_v = a[0]
	for i in range(1, n):
		if a[i] > max_v:
			max_v = a[i]
	return a.index(max_v)

def find_max_idx(a):
	n = len(a)
	max_idx = 0
	for i in range(1, n):
		if a[i] > a[max_idx]:
			max_idx = i
	return max_idx

응용문제로 최대값의 index를 찾는 문제인데 위쪽이 내 답, 아래쪽이 교과서 답이다.

01, 02번 문제로 배운 것은 알고리즘을 만들 때
반드시 !알고리즘적 사고!가 필요하다는 것이다.

그동안 내가 문제를 처리했던 것처럼 머릿 속에서 후루룩 처리해선 컴퓨터에 입력할 수 없다.
정확한 과정을 거쳐 컴퓨터에 딱딱 입력해야 컴퓨터가 알아듣는다.
